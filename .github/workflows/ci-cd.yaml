name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # super-lint:
  #   name: Super-Linter
  #   on:
  #     push:
  #       branches:
  #         - main

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Run Super-Linter
  #       uses: github/super-linter@v4
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

#  dockerise:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#  
#      - name: Build Docker Image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prima:v2 .
#      
#      - name: Log in to Docker Hub
#        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
#      
#      - name: Push Docker Image to Docker Hub
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/prima:v2
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Minikube
        run: |
          sudo apt-get update
          sudo apt-get install -y conntrack
          minikube start

      - name: Build and Tag Docker Image within Minikube
        run: |
          eval $(minikube docker-env)
          docker build -t prima:latest .

      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/pv.yaml
          sleep 10
          kubectl apply -f k8s/pvc.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml

      - name: Check if PV and PVC are Bound
        run: |
          sleep 10
          kubectl get pvc
          kubectl get pv

          PV_STATUS=$(kubectl get pv sqlite-pv -o jsonpath='{.status.phase}')
          PVC_STATUS=$(kubectl get pvc sqlite-pvc -o jsonpath='{.status.phase}')

           if [ "$PV_STATUS" == "Bound" ] && [ "$PVC_STATUS" == "Bound" ]; then
            echo "PV and PVC are bound!"
          else
            echo "PV or PVC is not bound."
            exit 1
          fi

      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=flask-api --timeout=120s

      - name: Test Deployment
        run: |
          # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"
      
          # Get the NodePort assigned to the service
            NODE_PORT=$(kubectl get svc flask-api-service -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"
      
          # Test if the service is accessible using curl 
          # Set the expected URL
            expected_url="http://$MINIKUBE_IP:NODE_PORT"

          # Use curl to get the content of the URL
            actual_output=$(curl -s "$expected_url")

          # Set the expected content
            expected_content="<!doctype html>
            <html lang=en>
            <title>404 Not Found</title>
            <h1>Not Found</h1>
            <p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>"

          # Compare the actual output with the expected content
            if [ "$actual_output" = "$expected_content" ]; then
            echo "Test passed! The content matches the expected output."
            else
            echo "Test failed! The content does not match the expected output."
            echo "Actual output:"
            echo "$actual_output"
            exit 1
            fi