name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # super-lint:
  #   name: Super-Linter

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Run Super-Linter
  #       uses: github/super-linter@v4
  #       env:
  #         DEFAULT_BRANCH: main
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

#  dockerise:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#  
#      - name: Build Docker Image
#        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/prima:v2 .
#      
#      - name: Log in to Docker Hub
#        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
#      
#      - name: Push Docker Image to Docker Hub
#        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/prima:v2
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Minikube
        run: |
          sudo apt-get update
          sudo apt-get install -y conntrack
          minikube start

      - name: Build and Tag Docker Image within Minikube
        run: |
          eval $(minikube docker-env)
          docker build -t prima:latest .

      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/pv.yaml
          sleep 10
          kubectl apply -f k8s/pvc.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml

      - name: Check if PV and PVC are Bound
        run: |
          sleep 10
          kubectl get pvc
          kubectl get pv

      - name: Wait for Pods to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=flask-api --timeout=120s

      - name: Test Deployment
        run: |
            # Get the Minikube IP
            MINIKUBE_IP=$(minikube ip)
            echo "Minikube IP: $MINIKUBE_IP"

            # Get the NodePort assigned to the service
            NODE_PORT=$(kubectl get svc flask-api-service -o jsonpath='{.spec.ports[0].nodePort}')
            echo "NodePort: $NODE_PORT"

            # Use double quotes around variables in the curl command
            curl "http://$MINIKUBE_IP:$NODE_PORT"
